Object.defineProperty(exports, '__esModule', { value: true });

const browser = require('@sentry/browser');
const tracing = require('./tracing.js');

/**
 * Creates routing instrumentation for Vue Router v2, v3 and v4
 *
 * @param router The Vue Router instance that is used
 */
function vueRouterInstrumentation(router) {
  return (
    startTransaction,
    startTransactionOnPageLoad = true,
    startTransactionOnLocationChange = true,
  ) => {
    const tags = {
      'routing.instrumentation': 'vue-router',
    };

    // We have to start the pageload transaction as early as possible (before the router's `beforeEach` hook
    // is called) to not miss child spans of the pageload.
    if (startTransactionOnPageLoad) {
      startTransaction({
        name: browser.WINDOW.location.pathname,
        op: 'pageload',
        tags,
        metadata: {
          source: 'url',
        },
      });
    }

    router.onError(error => browser.captureException(error));

    router.beforeEach((to, from, next) => {
      // According to docs we could use `from === VueRouter.START_LOCATION` but I couldnt get it working for Vue 2
      // https://router.vuejs.org/api/#router-start-location
      // https://next.router.vuejs.org/api/#start-location

      // from.name:
      // - Vue 2: null
      // - Vue 3: undefined
      // hence only '==' instead of '===', because `undefined == null` evaluates to `true`
      const isPageLoadNavigation = from.name == null && from.matched.length === 0;

      const data = {
        params: to.params,
        query: to.query,
      };

      // Determine a name for the routing transaction and where that name came from
      let transactionName = to.path;
      let transactionSource = 'url';
      if (to.name) {
        transactionName = to.name.toString();
        transactionSource = 'custom';
      } else if (to.matched[0] && to.matched[0].path) {
        transactionName = to.matched[0].path;
        transactionSource = 'route';
      }

      if (startTransactionOnPageLoad && isPageLoadNavigation) {
        const pageloadTransaction = tracing.getActiveTransaction();
        if (pageloadTransaction) {
          if (pageloadTransaction.metadata.source !== 'custom') {
            pageloadTransaction.setName(transactionName, transactionSource);
          }
          pageloadTransaction.setData('params', data.params);
          pageloadTransaction.setData('query', data.query);
        }
      }

      if (startTransactionOnLocationChange && !isPageLoadNavigation) {
        startTransaction({
          name: transactionName,
          op: 'navigation',
          tags,
          data,
          metadata: {
            source: transactionSource,
          },
        });
      }

      next();
    });
  };
}

exports.vueRouterInstrumentation = vueRouterInstrumentation;
//# sourceMappingURL=router.js.map
